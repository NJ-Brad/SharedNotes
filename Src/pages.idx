[
  {
    "Id": "B4F21A17-E637-4051-A84B-34E11B679448",
    "Name": "Modernizing a WinForms application",
    "DocumentType": "Page",
    "Pages": [],
    "PageContent": "# Modernizing a WinForms Application\n\n## Basic Requirements\n\n### Packages\nAdd the following NuGet packages to the project\n\u0060\u0060\u0060csharp\nInstall-package Microsoft.Extensions.DependencyInjection\nInstall-package Microsoft.Extensions.Logging\nInstall-package Microsoft.Extensions.Logging.Console\nInstall-package Microsoft.Extensions.Hosting\n\n\u0060\u0060\u0060\n\n### Update Program.cs\nAdd the following usings to the top of the file\n\u0060\u0060\u0060csharp\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.Logging;\n\n\u0060\u0060\u0060\n\nIn the Main method, replace\n\u0060\u0060\u0060csharp\nApplication.Run(new Form1());\n\u0060\u0060\u0060\nwith          \n\u0060\u0060\u0060csharp\n            IHost host = Host.CreateDefaultBuilder()\n                .ConfigureServices((hostContext, services) =\u003E\n                {\n                    //  If you want configuration available for your services :\n                    //  https://stackoverflow.com/questions/71480200/how-to-access-iconfiguration-provided-by-createdefaultbuilder-from-within-conf\n                    var config = hostContext.Configuration;\n\n                    services.AddLogging(configure =\u003E configure.AddDebug())\n                    .AddScoped\u003CForm1\u003E()     // this puts the form under DI\n                    ;\n                    // configure other services here\n                }).Build();\n\n            var form1 = host.Services.GetRequiredService\u003CForm1\u003E();\n            Application.Run(form1);\n\u0060\u0060\u0060\n\nIf you wish to use configuration\nAdd an application configuration file named appsettings.json\nSet \u0022Copy to Output Directory\u0022 property to \u0022Copy if Newer\u0022\n\n\n### Update Form1.cs\n\nAdd variables to hold the values provided by Dependency Injection.  In this instance the logger\n\u0060\u0060\u0060csharp\nprivate readonly ILogger _logger;\n\u0060\u0060\u0060\n\nIf you plan on using dependency injection, from within the form, include a variable to hold the host\n\u0060\u0060\u0060csharp\nprivate readonly IHost _host;\n\u0060\u0060\u0060\n        \nInclude all of the interfaces you will be leveraging on the form, in the constructor\n\n\u0060\u0060\u0060csharp\n        public Form1(ILogger\u003CForm1\u003E logger, ColorChanger changer, IHost host)\n\n        {\n            _logger = logger;\n            chg = changer;\n            _host = host;\n            InitializeComponent();\n        }\n\n        protected override void OnShown(EventArgs e)\n        {\n            base.OnShown(e);\n            _logger.LogInformation(\u0022Form1 {BusinessLayerEvent} at {dateTime}\u0022, \u0022Started\u0022, DateTime.UtcNow);\n            chg.ChangeColor(this);\n        }\n\u0060\u0060\u0060\n\n\n\n\n\n\n\n\nMain article on DI\n[https://www.thecodebuzz.com/dependency-injection-windows-form-desktop-app-net-core/](https://www.thecodebuzz.com/dependency-injection-windows-form-desktop-app-net-core/)\nAdding logging via DI: (includes nuget pkg info) \nhttps://www.thecodebuzz.com/logging-net-core-forms-desktop-application/\n\n\nThis includes instructions for loading additional configuration file types\nhttps://www.thecodebuzz.com/loading-configuration-ini-xml-json-net-core-console-winform/\n\n",
    "Author": "Brad",
    "Created": "2024-04-21T10:13:17.7303178",
    "ModifiedBy": "Brad",
    "Modified": "2024-04-21T10:13:17.7303178",
    "LowerName": "modernizing a winforms application"
  },
  {
    "Id": "7CC02E45-E593-418F-A664-5FB0F5124ADC",
    "Name": "Entity Framework and Visual Studio",
    "DocumentType": "Page",
    "Pages": [],
    "PageContent": "",
    "Author": "",
    "Created": "0001-01-01T00:00:00",
    "ModifiedBy": "",
    "Modified": "0001-01-01T00:00:00",
    "LowerName": "entity framework and visual studio"
  },
  {
    "Id": "7F615E66-5F82-4AFB-8197-C5FC7708DFE5",
    "Name": "Research",
    "DocumentType": "Page",
    "Pages": [],
    "PageContent": "https://www.proxmox.com/en/\nhttps://technotim.live/posts/homepage-dashboard/\nhttps://www.customguide.com/quick-references\nhttps://www.nuget.org/packages/LoadingIndicator.WinForms/\nBackgrounds : https://wallpapers.com/backgrounds\nNotetaking apps : https://www.makeuseof.com/tag/best-note-taking-tools-programmers/\nWeb Cam stand : https://www.amazon.com/gp/product/B09KXZM4LJ/ref=pe_27562270_807662800_em_2p_5_lm\nShoq EF SQL Query : https://chanmingman.wordpress.com/2021/12/04/how-to-show-sql-query-that-generated-by-linq/?WT.mc_id=DP-MVP-36769\n\nWhen Programmers Notebook getw written in Blazor : https://www.daveabrock.com/2021/02/18/copy-to-clipboard-markdown-editor/\n\n### WinGet\nhttps://duckduckgo.com/?q=create\u002Bwinget\u002Bpackage\u0026atb=v362-1\u0026ia=web\nhttps://learn.microsoft.com/en-us/windows/package-manager/package/manifest?tabs=minschema%2Cversion-example\nhttps://github.com/microsoft/winget-create\n### Purchase suggestions\nDesk mat : https://www.amazon.com/dp/B0BMTPC44X?tag=jezgaelias-na-20\u0026th=1\u0026linkId=1f29bb9a8c9f91307b4c96de6b1bb3ba\u0026ref_=as_li_ss_tl\u0026geniuslink=true\nShelf pin jig : https://www.amazon.com/GOINGMAKE-Template-Adjustable-Straight-Drilling/dp/B0C973KL63?keywords=going\u002Bmake\u002Bshelf\u002Bpin\u002Bjig\u0026qid=1698446111\u0026sr=8-2-spons\u0026sp_csd=d2lkZ2V0TmFtZT1zcF9hdGY\u0026psc=1\u0026linkCode=sl1\u0026tag=flynndoggww0f-20\u0026linkId=08ce8256311b4c8d44df3ad1fcf13ead\u0026language=en_US\u0026ref_=as_li_ss_tl\nIce Scraper : https://www.amazon.com/Snow-Joe-BDL-A0143-P2-Oversized-Windshields/dp/B0BNC7JN32/ref=sr_1_10?crid=3F36HX4YT8BI8\u0026keywords=battery\u002Brotary\u002Bice\u002Bscraper\u0026qid=1700922371\u0026sprefix=battery\u002Brotary\u002Bice\u002Bscraper%2Caps%2C77\u0026sr=8-10\nMicky Lanyard : https://www.shopdisney.com/mickey-mouse-pin-trading-lanyard-438051206865.html?cmp=OTL-Dcom\u0026att=DcomM_Search_Organic_lanyard\nCable Tie Mount : https://www.speedtechinternational.com/product/speedwrap-cable-tie-mount/\nCTM Screw Mount : https://www.thestrapstore.com/products/speedwrap-tie-mount?_pos=1\u0026_sid=a149ef815\u0026_ss=r\u0026variant=31318845194353\nStrap : https://www.thestrapstore.com/products/speedwrap-cinch-strap?ref=yotpo\n\n8 apps for scrum masters\nhttps://media.licdn.com/dms/document/media/D4D1FAQHhti6bG3rtig/feedshare-document-pdf-analyzed/0/1705431035046?e=1706745600\u0026v=beta\u0026t=r1J1Q93HCN3aLuK5U5-JlrpuJdsgwIi3UC3K3Q1SA3U\n\u002B Notion\n\u002B Miro\n\u002B Loom\n\u002B Brain.fm\n\u002B Chat GPT\n\u002B Pomofocus\n\u002B Pocket\n\u002B Geekbot\n\nMigrate ASP.Net to Azure : https://www.linkedin.com/learning/migrating-asp-dot-net-core-web-applications-to-azure/what-you-should-know?autoSkip=true\u0026resume=false\nUsing Web Components : https://www.linkedin.com/learning/web-components-and-modularization-practical-approaches/components-for-the-web\n10 SAFe principles : https://www.youtube.com/watch?v=zbAZZxTx3-Y\nStarting MAUI : https://www.youtube.com/watch?v=02pjHAXYK6s\nCreating a .Net CLI tool : https://www.linkedin.com/feed/update/urn:li:activity:7155317553056161793/\nSprint Planning : https://www.linkedin.com/feed/update/urn:li:activity:7156230995258576896/\nUnit testing a console app : https://www.linkedin.com/feed/update/urn:li:activity:7155448341391134720/\nInno Setup : https://jrsoftware.org/isinfo.php\nIcons : https://icon-icons.com/icon/notebook-agenda-notes/53653\nhttps://www.linkedin.com/advice/0/youre-start-project-what-best-management-owtxc?trk=contr\n\n[My Top 10 NEW Visual Studio Features of 2023 for .NET Developers - .NET Blog](https://devblogs.microsoft.com/dotnet/my-top-10-new-visual-studio-features-of-2023-for-dotnet-developers/ \u0022My Top 10 NEW Visual Studio Features of 2023 for .NET Developers - .NET Blog\u0022)\n\n[Sprint vs iteration](https://www.linkedin.com/feed/update/urn:li:activity:7165785925493465089/ \u0022Sign Up | LinkedIn\u0022)\n\n![20240222-142927.jpg](\u003C$LOCATION$\u003E20240222-142927.jpg)\n\n[OWASP Top Ten | OWASP Foundation](https://owasp.org/www-project-top-ten/ \u0022OWASP Top Ten | OWASP Foundation\u0022)\n\n[Leadership Library](https://www.linkedin.com/feed/update/urn:li:activity:7166358829176086528/ \u0022Sign Up | LinkedIn\u0022)\n",
    "Author": "Bradford Bruce",
    "Created": "2024-02-22T14:31:42.2914995",
    "ModifiedBy": "Bradford Bruce",
    "Modified": "2024-02-22T18:41:41.9591436",
    "LowerName": "research"
  },
  {
    "Id": "6B6BFE88-3680-4EA7-8EDC-ADE48E05C2C6",
    "Name": "Entity Framework Links",
    "DocumentType": "Page",
    "Pages": [],
    "PageContent": "",
    "Author": "Bradford Bruce",
    "Created": "2024-02-13T14:35:19.340971",
    "ModifiedBy": "Bradford Bruce",
    "Modified": "2024-02-13T14:35:19.340971",
    "LowerName": "entity framework links"
  },
  {
    "Id": "B9B211E6-4B3A-4D1E-B69F-EA80CA72F909",
    "Name": "Copy Button",
    "DocumentType": "Page",
    "Pages": [],
    "PageContent": "",
    "Author": "",
    "Created": "0001-01-01T00:00:00",
    "ModifiedBy": "",
    "Modified": "0001-01-01T00:00:00",
    "LowerName": "copy button"
  },
  {
    "Id": "AF4CA39B-DF31-4A9D-849A-D54D0078B6BB",
    "Name": "Kanban",
    "DocumentType": "Page",
    "Pages": [],
    "PageContent": "",
    "Author": "",
    "Created": "0001-01-01T00:00:00",
    "ModifiedBy": "",
    "Modified": "0001-01-01T00:00:00",
    "LowerName": "kanban"
  },
  {
    "Id": "AB8AB738-6CF6-42E6-9121-3695528A6AD6",
    "Name": "Dialog to Wizard Page",
    "DocumentType": "Page",
    "Pages": [],
    "PageContent": "",
    "Author": "Bradford Bruce",
    "Created": "2024-02-18T20:28:44.7941617",
    "ModifiedBy": "Bradford Bruce",
    "Modified": "2024-02-18T20:29:05.0864719",
    "LowerName": "dialog to wizard page"
  },
  {
    "Id": "07C2134B-43CE-4258-BC14-86E7D855BEE0",
    "Name": "Adding a Wizard Page",
    "DocumentType": "Page",
    "Pages": [],
    "PageContent": "",
    "Author": "",
    "Created": "0001-01-01T00:00:00",
    "ModifiedBy": "",
    "Modified": "0001-01-01T00:00:00",
    "LowerName": "adding a wizard page"
  },
  {
    "Id": "D547B5FC-E012-4712-8EAA-46A29CA41FC2",
    "Name": "ZZZZ",
    "DocumentType": "Page",
    "Pages": [],
    "PageContent": "",
    "Author": "Bradford Bruce",
    "Created": "2024-02-09T17:01:41.6267157",
    "ModifiedBy": "Bradford Bruce",
    "Modified": "2024-08-04T20:39:33.8509458-04:00",
    "LowerName": "zzzz"
  },
  {
    "Id": "D0FA63B9-53F5-400A-828D-F110F09FDB9B",
    "Name": "SQLite",
    "DocumentType": "Page",
    "Pages": [],
    "PageContent": "",
    "Author": "Bradford Bruce",
    "Created": "2024-02-12T10:57:59.379013",
    "ModifiedBy": "Bradford Bruce",
    "Modified": "2024-02-12T10:58:52.5989229",
    "LowerName": "sqlite"
  },
  {
    "Id": "2808B560-4ADE-41EE-ABF1-53B7AF3B69E4",
    "Name": "Phased rollout",
    "DocumentType": "Page",
    "Pages": [],
    "PageContent": "",
    "Author": "Bradford Bruce",
    "Created": "2024-02-12T17:06:37.6136708",
    "ModifiedBy": "Bradford Bruce",
    "Modified": "2024-02-12T17:10:49.7759349",
    "LowerName": "phased rollout"
  },
  {
    "Id": "5796E947-5C23-4EFA-ACBF-BAC70F7FB1A9",
    "Name": "Application Restart",
    "DocumentType": "Page",
    "Pages": [],
    "PageContent": "",
    "Author": "Bradford Bruce",
    "Created": "2024-02-13T12:14:44.8552289",
    "ModifiedBy": "Bradford Bruce",
    "Modified": "2024-02-13T12:56:13.7560415",
    "LowerName": "application restart"
  },
  {
    "Id": "62914E8F-2FAF-4BDA-8EDD-F8A8A5FD45C2",
    "Name": "Sending text to printer",
    "DocumentType": "Page",
    "Pages": [],
    "PageContent": "",
    "Author": "Bradford Bruce",
    "Created": "2024-02-14T14:31:27.7888755",
    "ModifiedBy": "Bradford Bruce",
    "Modified": "2024-02-14T14:34:21.7722891",
    "LowerName": "sending text to printer"
  },
  {
    "Id": "39DF29A7-D8B7-4415-A844-06D58A9AC83C",
    "Name": "JumpLists for WinForms",
    "DocumentType": "Page",
    "Pages": [],
    "PageContent": "",
    "Author": "Bradford Bruce",
    "Created": "2024-02-15T11:49:38.7031306",
    "ModifiedBy": "Bradford Bruce",
    "Modified": "2024-02-17T18:21:15.608209",
    "LowerName": "jumplists for winforms"
  },
  {
    "Id": "BBDEBC6A-5797-4E1D-8A37-68FFDEA719BE",
    "Name": "Application to library",
    "DocumentType": "Page",
    "Pages": [],
    "PageContent": "Edit the project file\n\n\u0060\u0060\u0060xml\n\u003CProject Sdk=\u0022Microsoft.NET.Sdk\u0022\u003E\n\n  \u003CPropertyGroup\u003E\n    \u003COutputType\u003EWinExe\u003C/OutputType\u003E\n    \u003CTargetFramework\u003Enet8.0-windows\u003C/TargetFramework\u003E\n    \u003CNullable\u003Eenable\u003C/Nullable\u003E\n    \u003CUseWindowsForms\u003Etrue\u003C/UseWindowsForms\u003E\n    \u003CImplicitUsings\u003Eenable\u003C/ImplicitUsings\u003E\n    \u003CApplicationIcon\u003EIcon1.ico\u003C/ApplicationIcon\u003E\n\t  \u003CAssemblyName\u003EProject Crossroads\u003C/AssemblyName\u003E\n  \u003C/PropertyGroup\u003E\n\u0060\u0060\u0060\n",
    "Author": "Bradford Bruce",
    "Created": "2024-02-18T16:42:11.5484474",
    "ModifiedBy": "Bradford Bruce",
    "Modified": "2024-02-19T08:13:22.8361599",
    "LowerName": "application to library"
  },
  {
    "Id": "15E0AB6C-8D7B-4584-9BDB-0896CF80E0E9",
    "Name": "Dialog to FormControl",
    "DocumentType": "Page",
    "Pages": [],
    "PageContent": "",
    "Author": "Bradford Bruce",
    "Created": "2024-02-19T07:44:30.9655642",
    "ModifiedBy": "Bradford Bruce",
    "Modified": "2024-02-19T13:39:36.4448231",
    "LowerName": "dialog to formcontrol"
  },
  {
    "Id": "992424E4-8030-4AF2-87C3-7AC84799C65E",
    "Name": "Creating an Organizer Component",
    "DocumentType": "Page",
    "Pages": [],
    "PageContent": "",
    "Author": "Bradford Bruce",
    "Created": "2024-03-05T12:29:55.3910296",
    "ModifiedBy": "Bradford Bruce",
    "Modified": "2024-03-12T20:18:36.3991486",
    "LowerName": "creating an organizer component"
  },
  {
    "Id": "DC935069-45C5-4DD3-9C18-9676B39057FE",
    "Name": "Add Web API Hosting to WinForms application",
    "DocumentType": "Page",
    "Pages": [],
    "PageContent": "# Add Web API Hosting to WinForms application\nBradford Bruce - March 19, 2024\n\n## Introduction\nThis article will demonstrate a method to add a web server to a WinForms application.  It is intended to provide a REST API, as well as a WinForms application.  This could be useful if you desire to test utilizing Web APIs from your WinForms application\n\n!!!\u003ENote\nThis document replicates the default Web API functionality, generated by .Net\n!!!\n\n## Prerequisites\n\u002B Visual Studio 2022\n\n## Building the app\n\nAt a minimum, you will need this package\n\u0060\u0060\u0060bash\ndotnet add package Microsoft.AspNetCore.App --version 8.0.3\n\u0060\u0060\u0060\nIf you would like to include Swagger support, you will need to add this package\n\u0060\u0060\u0060bash\ndotnet add package Swashbuckle.AspNetCore --version 6.5.0\n\u0060\u0060\u0060\n\nCreate a class named ApiHost, then paste the code below\n\u0060\u0060\u0060csharp\n// if you have installed the package Swashbuckle.AspNetCore, uncomment the line below to utilize it\n//#define SwaggerInstalled\n\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\n\n\ninternal class ApiHost\n{\n    WebApplication app = null;\n\n    internal async Task Run()\n    {\n        //var builder = WebApplication.CreateBuilder(args);\n        var builder = WebApplication.CreateBuilder();\n\n        if (string.IsNullOrEmpty(builder.Configuration[\u0022ASPNETCORE_URLS\u0022]))\n        {\n            // if not previously set\n            builder.WebHost.UseUrls(\u0022http://localhost:5010\u0022, \u0022https://localhost:5011\u0022);\n        }\n\n        // Add services to the container.\n        builder.Services.AddControllers();\n\n        // https://www.thecodebuzz.com/failed-to-determine-the-https-port-for-the-redirect/\n        //builder.Services.AddHttpsRedirection(options =\u003E { options.HttpsPort = 5001; });\n\n        // Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle\n        builder.Services.AddEndpointsApiExplorer();\n#if SwaggerInstalled\n            builder.Services.AddSwaggerGen();\n#endif\n\n        //var app = builder.Build();\n        app = builder.Build();\n\n        // Configure the HTTP request pipeline.\n        if (app.Environment.IsDevelopment())\n        {\n#if SwaggerInstalled\n                app.UseSwagger();\n                app.UseSwaggerUI();\n#endif\n        }\n\n        app.UseHttpsRedirection();\n\n        app.UseAuthorization();\n\n        app.MapControllers();\n\n        app.RunAsync();\n    }\n}\n\u0060\u0060\u0060\n\nIf you wish to utilize Swagger, uncomment the second line, like this\n\u0060\u0060\u0060csharp hl_lines=\u201D2\u201D\n// if you have installed the package Swashbuckle.AspNetCore, uncomment the line below to utilize it\n#define SwaggerInstalled\n\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\n\u0060\u0060\u0060\n\nCreate a folder called *Controllers* in the root of the project.\nInside the folder, create a class WeatherForecastController and copy the following code\n\u0060\u0060\u0060csharp\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Logging;\n\nnamespace TestHost.Controllers\n{\n    [ApiController]\n    [Route(\u0022[controller]\u0022)]\n    public class WeatherForecastController : ControllerBase\n    {\n        private static readonly string[] Summaries = new[]\n        {\n            \u0022Freezing\u0022, \u0022Bracing\u0022, \u0022Chilly\u0022, \u0022Cool\u0022, \u0022Mild\u0022, \u0022Warm\u0022, \u0022Balmy\u0022, \u0022Hot\u0022, \u0022Sweltering\u0022, \u0022Scorching\u0022\n        };\n\n        private readonly ILogger\u003CWeatherForecastController\u003E _logger;\n\n        public WeatherForecastController(ILogger\u003CWeatherForecastController\u003E logger)\n        {\n            _logger = logger;\n        }\n\n        [HttpGet(Name = \u0022GetWeatherForecast\u0022)]\n        public IEnumerable\u003CWeatherForecast\u003E Get()\n        {\n            return Enumerable.Range(1, 5).Select(index =\u003E new WeatherForecast\n            {\n                Date = DateOnly.FromDateTime(DateTime.Now.AddDays(index)),\n                TemperatureC = Random.Shared.Next(-20, 55),\n                Summary = Summaries[Random.Shared.Next(Summaries.Length)]\n            })\n            .ToArray();\n        }\n    }\n}\n\u0060\u0060\u0060\nAdd the following class to the root of your project\n\u0060\u0060\u0060csharp\nnamespace TestHost\n{\n    public class WeatherForecast\n    {\n        public DateOnly Date { get; set; }\n\n        public int TemperatureC { get; set; }\n\n        public int TemperatureF =\u003E 32 \u002B (int)(TemperatureC / 0.5556);\n\n        public string? Summary { get; set; }\n    }\n}\n\u0060\u0060\u0060\nCreate a settings file AppSettings.json, in the root of your project\n\u0060\u0060\u0060json\n{\n  \u0022Logging\u0022: {\n    \u0022LogLevel\u0022: {\n      \u0022Default\u0022: \u0022Information\u0022,\n      \u0022Microsoft.AspNetCore\u0022: \u0022Warning\u0022\n    }\n  },\n  \u0022AllowedHosts\u0022: \u0022*\u0022\n}\n\u0060\u0060\u0060\nIn program.cs add the following, before calling Application.Run\n\u0060\u0060\u0060csharp\nApiHost host = new ApiHost();\nhost.Run();\n\u0060\u0060\u0060\nLike this\n\u0060\u0060\u0060csharp  hl_lines=\u201D15,16\u201D\nnamespace TestHost\n{\n    internal static class Program\n    {\n        /// \u003Csummary\u003E\n        ///  The main entry point for the application.\n        /// \u003C/summary\u003E\n        [STAThread]\n        static void Main()\n        {\n            // To customize application configuration such as set high DPI settings or default font,\n            // see https://aka.ms/applicationconfiguration.\n            ApplicationConfiguration.Initialize();\n\n            ApiHost host = new ApiHost();\n            host.Run();\n            Application.Run(new Form1());\n        }\n    }\n}\n\u0060\u0060\u0060\n## Demonstration\nCompile and Start the application\nYou should see the application main form\n### Testing the API\nOpen your browser and enter the address **https://localhost:7002/weatherforecast** then press enter\nYou should see a page like this\n![Sample API result](\u003C$LOCATION$\u003E20240319-183437.jpg)\n\n\n### If you selected to utilize Swagger\nOpen your browser and enter the address **https://localhost:7002/swagger** then press enter\nYou should see a page like this\n![Sample Swagger UI](\u003C$LOCATION$\u003E20240319-183204.jpg)\n\n## Conclusion\nHopefully this article will prove useful in your environment.\n\n*Bradford Bruce has been solving problems, (and creating some), leveraging computers for over 30 years.  Everything from Pascal to C# has crossed his path.*\n\n## Option 2\nAdd a WebAPI project to your existing solution\nAdd a class titled ApiHost to the WebAPI project\n\u0060\u0060\u0060csharp\nusing Microsoft.AspNetCore.Mvc.ApplicationParts;\nusing System.Reflection;\n\nnamespace WebApplication1\n{\n    public class ApiHost\n    {\n        WebApplication app = null;\n\n        public List\u003Cstring\u003E endpoints { get; } = new List\u003Cstring\u003E();\n\n        public async Task Run()\n        {\n            //var builder = WebApplication.CreateBuilder(args);\n            var builder = WebApplication.CreateBuilder();\n\n            if (string.IsNullOrEmpty(builder.Configuration[\u0022ASPNETCORE_URLS\u0022]))\n            {\n                // if not previously set\n                builder.WebHost.UseUrls(\u0022http://localhost:5010\u0022, \u0022https://localhost:5011\u0022);\n            }\n\n            // Add services to the container.\n            var assembly = this.GetType().Assembly;\n            var part = new AssemblyPart(assembly);\n            builder.Services.AddControllers()\n                .ConfigureApplicationPartManager(apm =\u003E apm.ApplicationParts.Add(part));\n\n            // Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle\n            builder.Services.AddEndpointsApiExplorer();\n            builder.Services.AddSwaggerGen();\n\n            //var app = builder.Build();\n            // putting app in a class variable, instead of local, allows the API to continue after exiting this method\n            app = builder.Build();\n\n            // Configure the HTTP request pipeline.\n            if (app.Environment.IsDevelopment())\n            {\n                app.UseSwagger();\n                app.UseSwaggerUI();\n            }\n\n            app.UseHttpsRedirection();\n\n            app.UseAuthorization();\n\n            app.MapControllers();\n\n            GetRoutes();\n\n            app.RunAsync();\n        }\n\n        private void GetRoutes()\n        {\n            endpoints.Clear();\n\n            endpoints.Add(\u0022Swagger\u0022);\n\n            TypeInfo typeInfo = typeof(WebApplication).GetTypeInfo();\n            var v1 = typeInfo.DeclaredFields.Where(e =\u003E e.Name == \u0022_dataSources\u0022).FirstOrDefault();\n            var v2 = (List\u003CEndpointDataSource\u003E)v1.GetValue(app);\n            foreach (var v3 in v2)\n            {\n                foreach (var v4 in v3.Endpoints)\n                {\n                    var v5 = (Microsoft.AspNetCore.Routing.Patterns.RoutePattern)v4.GetType().GetProperty(\u0022RoutePattern\u0022).GetValue(v4, null);\n                    endpoints.Add(v5.RawText);\n                }\n            }\n        }\n    }\n}\n\u0060\u0060\u0060\nAdd a reference in your WinForms application to the WebAPI project\nAdd \u0060using WebApplication1;\u0060 to the Program.cs file\n\nIn program.cs add the following, before calling Application.Run\n\u0060\u0060\u0060csharp\nApiHost host = new ApiHost();\nhost.Run();\n\u0060\u0060\u0060\nLike this\n\u0060\u0060\u0060csharp  hl_lines=\u201D15,16\u201D\nnamespace TestHost\n{\n    internal static class Program\n    {\n        /// \u003Csummary\u003E\n        ///  The main entry point for the application.\n        /// \u003C/summary\u003E\n        [STAThread]\n        static void Main()\n        {\n            // To customize application configuration such as set high DPI settings or default font,\n            // see https://aka.ms/applicationconfiguration.\n            ApplicationConfiguration.Initialize();\n\n            ApiHost host = new ApiHost();\n            host.Run();\n            Application.Run(new Form1());\n        }\n    }\n}\n\u0060\u0060\u0060\n",
    "Author": "Bradford Bruce",
    "Created": "2024-03-19T11:14:35.3093926",
    "ModifiedBy": "Bradford Bruce",
    "Modified": "2024-03-25T18:15:22.4800497",
    "LowerName": "add web api hosting to winforms application"
  },
  {
    "Id": "67809D3C-494E-4621-9FB2-FE9FF2B16C63",
    "Name": "Twilio Template",
    "DocumentType": "Page",
    "Pages": [],
    "PageContent": "",
    "Author": "Bradford Bruce",
    "Created": "2024-03-20T10:39:24.9963023",
    "ModifiedBy": "Bradford Bruce",
    "Modified": "2024-03-20T10:43:42.337694",
    "LowerName": "twilio template"
  },
  {
    "Id": "5F6CC065-9E65-4898-9F44-3441A3044153",
    "Name": "Using CLI for .Net",
    "DocumentType": "Page",
    "Pages": [],
    "PageContent": "# Using CLI for .Net\n\n## Article One\n[visual studio code - how to add a new c# file to a project using dotnet-cli - Stack Overflow](https://stackoverflow.com/questions/49087421/how-to-add-a-new-c-sharp-file-to-a-project-using-dotnet-cli \u0022visual studio code - how to add a new c# file to a project using dotnet-cli - Stack Overflow\u0022)\n\nThis may not be necessary any longer\n\u0060\u0060\u0060bash\ndotnet new --install Yae.Templates\n\u0060\u0060\u0060\n\u0060\u0060\u0060bash\ndotnet new class -ty \u0022YourClassName\u0022\n\u0060\u0060\u0060\n\u0060dotnet new class -h\u0060 to see the available options.\n\n## Article Two\nSome of this might be helful\n[ASP.NET Core: Add Class Library using .NET Core Command-Line Interface (CLI) | Microsoft Learn](https://learn.microsoft.com/en-us/archive/technet-wiki/50260.asp-net-core-add-class-library-using-net-core-command-line-interface-cli \u0022ASP.NET Core: Add Class Library using .NET Core Command-Line Interface (CLI) | Microsoft Learn\u0022)\n\n## Article Three\nThis is a little \u0022wonky\u0022\n[https://dev.to/masanori_msl/net-add-files-into-projects-5en](https://dev.to/masanori_msl/net-add-files-into-projects-5en \u0022https://dev.to/masanori_msl/net-add-files-into-projects-5en\u0022)\n\n## Zip Deploy Links\n[How to: Compress and extract files - .NET | Microsoft Learn](https://learn.microsoft.com/en-us/dotnet/standard/io/how-to-compress-and-extract-files \u0022How to: Compress and extract files - .NET | Microsoft Learn\u0022)\n\n[.NET - Parse the Command Line with System.CommandLine | Microsoft Learn](https://learn.microsoft.com/en-us/archive/msdn-magazine/2019/march/net-parse-the-command-line-with-system-commandline \u0022.NET - Parse the Command Line with System.CommandLine | Microsoft Learn\u0022)\n\n[https://github.com/dotnet/command-line-api/issues](https://github.com/dotnet/command-line-api/issues \u0022https://github.com/dotnet/command-line-api/issues\u0022)\n\n[Making a tiny .NET Core 3.0 entirely self-contained single executable - Scott Hanselman\u0027s Blog](https://www.hanselman.com/blog/making-a-tiny-net-core-30-entirely-selfcontained-single-executable \u0022Making a tiny .NET Core 3.0 entirely self-contained single executable - Scott Hanselman\u0027s Blog\u0022)\n\n[Application publishing - .NET | Microsoft Learn](https://learn.microsoft.com/en-us/dotnet/core/deploying/ \u0022Application publishing - .NET | Microsoft Learn\u0022)\n\n[Publish apps with the .NET CLI - .NET | Microsoft Learn](https://learn.microsoft.com/en-us/dotnet/core/deploying/deploy-with-cli \u0022Publish apps with the .NET CLI - .NET | Microsoft Learn\u0022)\n\n[Self-contained executable with .NET Core 3.0 on Windows, Linux and Raspberry](https://gunnarpeipman.com/dotnet-core-self-contained-executable/ \u0022Self-contained executable with .NET Core 3.0 on Windows, Linux and Raspberry\u0022)\n\n### Creating a single ext (trimmed) output file\n\u0060\u0060\u0060bash\ndotnet publish -r win-x64 /p:PublishSingleFile=true /p:PublishTrimmed=true\n\u0060\u0060\u0060\n\n[Tutorial: Get started with System.CommandLine - .NET | Microsoft Learn](https://learn.microsoft.com/en-us/dotnet/standard/commandline/get-started-tutorial \u0022Tutorial: Get started with System.CommandLine - .NET | Microsoft Learn\u0022)\n\n[https://github.com/dotnet/docs/tree/main/docs/standard/commandline](https://github.com/dotnet/docs/tree/main/docs/standard/commandline \u0022https://github.com/dotnet/docs/tree/main/docs/standard/commandline\u0022)\n\n[System.CommandLine overview - .NET | Microsoft Learn](https://learn.microsoft.com/en-us/dotnet/standard/commandline/ \u0022System.CommandLine overview - .NET | Microsoft Learn\u0022)\n\n[How to bind arguments to handlers in System.CommandLine - .NET | Microsoft Learn](https://learn.microsoft.com/en-us/dotnet/standard/commandline/model-binding \u0022How to bind arguments to handlers in System.CommandLine - .NET | Microsoft Learn\u0022)\n\n",
    "Author": "Bradford Bruce",
    "Created": "2024-03-22T17:37:28.4903767",
    "ModifiedBy": "Bradford Bruce",
    "Modified": "2024-03-24T09:55:06.9040757",
    "LowerName": "using cli for .net"
  },
  {
    "Id": "E37014AB-9B34-4337-A043-47DDE574165F",
    "Name": "Pieces",
    "DocumentType": "Page",
    "Pages": [],
    "PageContent": "# Pieces\n\n- [ ] Access local repo via directory\n[ ] Access local repo via web\n[ ] Access remote repo via web\n[ ] Process package\n\n[How to host your own NuGet Server and Package Feed - Scott Hanselman\u0027s Blog](https://www.hanselman.com/blog/how-to-host-your-own-nuget-server-and-package-feed \u0022How to host your own NuGet Server and Package Feed - Scott Hanselman\u0027s Blog\u0022)\n\n[https://github.com/NuGet/docs.microsoft.com-nuget/blob/main/docs/hosting-packages/Overview.md](https://github.com/NuGet/docs.microsoft.com-nuget/blob/main/docs/hosting-packages/Overview.md \u0022https://github.com/NuGet/docs.microsoft.com-nuget/blob/main/docs/hosting-packages/Overview.md\u0022)\n\n[https://github.com/NuGet/docs.microsoft.com-nuget/blob/main/docs/hosting-packages/Local-Feeds.md](https://github.com/NuGet/docs.microsoft.com-nuget/blob/main/docs/hosting-packages/Local-Feeds.md \u0022https://github.com/NuGet/docs.microsoft.com-nuget/blob/main/docs/hosting-packages/Local-Feeds.md\u0022)\n\n[https://github.com/NuGet/NuGet.Server](https://github.com/NuGet/NuGet.Server \u0022https://github.com/NuGet/NuGet.Server\u0022)\n\n[Using NuGet.Server to Host NuGet Feeds | Microsoft Learn](https://learn.microsoft.com/en-us/nuget/hosting-packages/nuget-server \u0022Using NuGet.Server to Host NuGet Feeds | Microsoft Learn\u0022)\n\n[Overview of Hosting Your Own NuGet Feeds | Microsoft Learn](https://learn.microsoft.com/en-us/nuget/hosting-packages/overview \u0022Overview of Hosting Your Own NuGet Feeds | Microsoft Learn\u0022)\n\n[API v3 Specification \u00B7 NuGet/NuGetGallery Wiki \u00B7 GitHub](https://github.com/NuGet/NuGetGallery/wiki/API-v3-Specification \u0022API v3 Specification \u00B7 NuGet/NuGetGallery Wiki \u00B7 GitHub\u0022)\n\n[\n        NuGet Gallery\n        | RestSharp 110.2.1-alpha.0.16\n    ](https://www.nuget.org/packages/RestSharp/110.2.1-alpha.0.16 \u0022\n        NuGet Gallery\n        | RestSharp 110.2.1-alpha.0.16\n    \u0022)\n\n[c# - GET a package from NuGetV3 API - Stack Overflow](https://stackoverflow.com/questions/34958908/get-a-package-from-nugetv3-api \u0022c# - GET a package from NuGetV3 API - Stack Overflow\u0022)\n\n[Overview of the NuGet Server API | Microsoft Learn](https://learn.microsoft.com/en-us/nuget/api/overview \u0022Overview of the NuGet Server API | Microsoft Learn\u0022)\n\n[https://github.com/nuget/docs.microsoft.com-nuget/blob/main/docs/api/overview.md](https://github.com/nuget/docs.microsoft.com-nuget/blob/main/docs/api/overview.md \u0022https://github.com/nuget/docs.microsoft.com-nuget/blob/main/docs/api/overview.md\u0022)\n\n[https://dev.to/yerac/include-both-nuget-package-references-and-project-reference-dll-using-dotnet-pack-2d8p](https://dev.to/yerac/include-both-nuget-package-references-and-project-reference-dll-using-dotnet-pack-2d8p \u0022https://dev.to/yerac/include-both-nuget-package-references-and-project-reference-dll-using-dotnet-pack-2d8p\u0022)\n\n[visual studio - Build NuGet Package automatically including referenced dependencies - Stack Overflow](https://stackoverflow.com/questions/16173568/build-nuget-package-automatically-including-referenced-dependencies \u0022visual studio - Build NuGet Package automatically including referenced dependencies - Stack Overflow\u0022)\n\n[Add a README to Your NuGet Package - The NuGet Blog](https://devblogs.microsoft.com/nuget/add-a-readme-to-your-nuget-package/ \u0022Add a README to Your NuGet Package - The NuGet Blog\u0022)\n\n[Install NuGet client tools | Microsoft Learn](https://learn.microsoft.com/en-us/nuget/install-nuget-client-tools?tabs=windows#nugetexe-cli \u0022Install NuGet client tools | Microsoft Learn\u0022)\n\n[Exploring the NuGet client libraries - Meziantou\u0027s blog](https://www.meziantou.net/exploring-the-nuget-client-libraries.htm#installing-package-t \u0022Exploring the NuGet client libraries - Meziantou\u0027s blog\u0022)\n\n[Dave Glick - Exploring the NuGet v3 Libraries, Part 3](https://www.daveaglick.com/posts/exploring-the-nuget-v3-libraries-part-3 \u0022Dave Glick - Exploring the NuGet v3 Libraries, Part 3\u0022)\n\n[https://github.com/NuGet/Samples/tree/main/NuGetProtocolSamples](https://github.com/NuGet/Samples/tree/main/NuGetProtocolSamples \u0022https://github.com/NuGet/Samples/tree/main/NuGetProtocolSamples\u0022)\n\n[NuGet Client SDK | Microsoft Learn](https://learn.microsoft.com/en-us/nuget/reference/nuget-client-sdk \u0022NuGet Client SDK | Microsoft Learn\u0022)\n\n[Install NuGet client tools | Microsoft Learn](https://learn.microsoft.com/en-us/nuget/install-nuget-client-tools?tabs=windows#nugetexe-cli \u0022Install NuGet client tools | Microsoft Learn\u0022)\n\n## Decision\n25 Mar, 2024 : Do not pursue, at this time.  NuGet does not update classes.  It adds files to the project.\n\nThen again...  [visual studio - Can I add a custom step to a nuget install - Stack Overflow](https://stackoverflow.com/questions/39034123/can-i-add-a-custom-step-to-a-nuget-install \u0022visual studio - Can I add a custom step to a nuget install - Stack Overflow\u0022)\n\nAnd it\u0027s gone... [NuGet 3 - What and Why? - The NuGet Blog](https://devblogs.microsoft.com/nuget/NuGet-3-What-and-Why/ \u0022NuGet 3 - What and Why? - The NuGet Blog\u0022)\n(Look for \u0022Powershell Install and Uninstall Scripts\u0022)\n\n## Alternative\nIf you want to do refactoring, check out this link.  [Visual Studio 2017 Extension for custom C# refactoring across entire solution - Stack Overflow](https://stackoverflow.com/questions/55194984/visual-studio-2017-extension-for-custom-c-sharp-refactoring-across-entire-soluti \u0022Visual Studio 2017 Extension for custom C# refactoring across entire solution - Stack Overflow\u0022)\n\n",
    "Author": "Bradford Bruce",
    "Created": "2024-03-24T09:46:19.5550199",
    "ModifiedBy": "Bradford Bruce",
    "Modified": "2024-03-25T10:38:32.6311747",
    "LowerName": "pieces"
  },
  {
    "Id": "17FC6590-52E9-402F-AAF6-30C462F114FA",
    "Name": "Install Sql Server on Ubuntu Server",
    "DocumentType": "Page",
    "Pages": [],
    "PageContent": "",
    "Author": "Brad",
    "Created": "2024-03-26T13:23:54.9647971",
    "ModifiedBy": "Brad",
    "Modified": "2024-03-26T13:26:43.107042",
    "LowerName": "install sql server on ubuntu server"
  },
  {
    "Id": "8E6BCC51-92C7-43D5-A6EF-C269BF98A9E2",
    "Name": "Install Sql Server on Window Server",
    "DocumentType": "Page",
    "Pages": [],
    "PageContent": "",
    "Author": "Brad",
    "Created": "2024-03-26T13:25:48.1024517",
    "ModifiedBy": "Brad",
    "Modified": "2024-03-26T13:26:35.2230636",
    "LowerName": "install sql server on window server"
  },
  {
    "Id": "9CCED452-CD0D-4F85-81F8-6546D7BF0202",
    "Name": "Code Library",
    "DocumentType": "Page",
    "Pages": [],
    "PageContent": "",
    "Author": "Brad",
    "Created": "2024-04-02T13:24:07.4749913",
    "ModifiedBy": "Brad",
    "Modified": "2024-04-02T13:26:16.4999277",
    "LowerName": "code library"
  },
  {
    "Id": "C3E02BF5-9349-4842-8AB3-958CA537896D",
    "Name": "Script Manager",
    "DocumentType": "Page",
    "Pages": [],
    "PageContent": "# Script Manager\n- Use a DAL that can be switched between local and web service  (the web service will use the local part of the library)\n- Load Scripts\nUse \u0022same\u0022 format as red-gate SQL Scripts Manager\nScripts will be stored in a separate folder.\nAdd categories in the future.  Right now, all in one group\n\nSet correct icon\nRun Query\nRun Script\nRead Parameters\nRun with Parameters\nExport query results\nexport script results\n\nExecution engine need to be able to run on the server, as well as the client.  (We can\u0027t get to the production server over the vpn)",
    "Author": "Brad",
    "Created": "2024-04-02T13:27:10.3435997",
    "ModifiedBy": "Brad",
    "Modified": "2024-04-02T13:30:10.3432984",
    "LowerName": "script manager"
  },
  {
    "Id": "83D345B6-8EE3-48EA-BC8B-A8257C817C25",
    "Name": "Busy Programmer",
    "DocumentType": "Page",
    "Pages": [],
    "PageContent": "# Busy Programmer\n\n## To Do\nCodes manager\npermissions manager\ncrash handler\nGood logo\n\n## Done\nCalculateNext\nSelf installing service\n\n## Tools\nTrello\nJustInMind prototyper\nyEd Graph Editor\nBugzilla\nSVN\nGit\nSCM Manager\nRedmine virtual machines\nReview Bboard\nMySQL\n\n## Notes\n[Holidays and business date calculations and translations - CodeProject](http://www.codeproject.com/Articles/597900/Holidays-and-Business-Date-Calculations-and-transl \u0022Holidays and business date calculations and translations - CodeProject\u0022)\n\n[Working With Business Dates (Business Holidays/Weekends, Etc.) - CodeProject](http://www.codeproject.com/Articles/5622/Working-With-Business-Dates-Business-Holidays-Week \u0022Working With Business Dates (Business Holidays/Weekends, Etc.) - CodeProject\u0022)\n\nScript runners\n\u002B Call EXE\n\u002B call batch\n\u002B Python\n\u002B PowerShell\n\u002B CScript\n\u002B Plugin\n\n## Features\nInstallation guide\nGUI\nCommand line\nC#/VB.Net automation\n\n## oracle schedule fields\nJob_name\nJob_Action\nRepeat_Interval\n\n",
    "Author": "Brad",
    "Created": "2024-04-02T13:30:54.8007318",
    "ModifiedBy": "Brad",
    "Modified": "2024-04-02T13:39:21.9056704",
    "LowerName": "busy programmer"
  },
  {
    "Id": "30AF61A6-064E-48FE-AE6B-9EE701A85082",
    "Name": "Angular",
    "DocumentType": "Page",
    "Pages": [],
    "PageContent": "",
    "Author": "Brad",
    "Created": "2024-04-03T17:54:02.6534097",
    "ModifiedBy": "Brad",
    "Modified": "2024-04-03T18:36:57.4247866",
    "LowerName": "angular"
  },
  {
    "Id": "89ADAD4E-D560-440C-A8C9-8A306A1822CE",
    "Name": "Entity Framework Tips",
    "DocumentType": "Page",
    "Pages": [],
    "PageContent": "",
    "Author": "Brad",
    "Created": "2024-04-05T09:39:01.8781069",
    "ModifiedBy": "Brad",
    "Modified": "2024-04-05T13:59:58.5850279",
    "LowerName": "entity framework tips"
  },
  {
    "Id": "071AE09E-9318-400C-9073-05CA7DB01B56",
    "Name": "Using API Key Security for Web API",
    "DocumentType": "Page",
    "Pages": [],
    "PageContent": "",
    "Author": "Bradford Bruce",
    "Created": "2024-04-11T08:59:28.4166903",
    "ModifiedBy": "Bradford Bruce",
    "Modified": "2024-04-11T09:49:11.5645823",
    "LowerName": "using api key security for web api"
  },
  {
    "Id": "9F8EBAF3-27C7-447D-8F6D-470D494F482E",
    "Name": "Local Cloud (FOG)",
    "DocumentType": "Page",
    "Pages": [],
    "PageContent": "# Local Cloud (FOG)\n\n## Included projects\nSampleServer\nCentralConfig\nBlueprint.Proxy\nServerManager\nSwaggerCentral\n\n\nOrganizer\n\n\n## Swagger UI for microservices\n\u0022Swag Bag\u0022\n\nThere will be TWO swagger collections.  One for FOG and one for the actual application.\n\nLeverages the ability to set up OpenAPI in .Net microservices, at the click of a button.\n\nConsolidates each microservice into a single point of reference.\n\nDoes not expose individual microservices to external users\nMore secure\nOnly one configuration for reverse proxy\n\n### Considerations\n\u002B Need to consider using categories\n\u002B Do I put all information into a \u0022sorted document\u0022, or pull each category at the end, sort it, then put it back?\n\u002B could also tag the items to match the server they come from.  [\n\tGrouping Operations With Tags\n](https://swagger.io/docs/specification/grouping-operations-with-tags/ \u0022\n\tGrouping Operations With Tags\n\u0022)\nFunctional parts of Fog-LC should be written as components that can also be launched directly from the command line.  This will allow the components to be used outside of the main project\n\n## Links\n[Benefits of using the OpenAPI (Swagger) specification for your API? | Moesif Blog](https://www.moesif.com/blog/technical/api-design/Benefits-of-using-the-OpenAPI-Swagger-specification-for-your-API/ \u0022Benefits of using the OpenAPI (Swagger) specification for your API? | Moesif Blog\u0022)\n[https://github.com/microsoft/OpenAPI.NET](https://github.com/microsoft/OpenAPI.NET \u0022https://github.com/microsoft/OpenAPI.NET\u0022)\n[https://github.com/andreytreyt/yarp-swagger](https://github.com/andreytreyt/yarp-swagger \u0022https://github.com/andreytreyt/yarp-swagger\u0022)\n[Configuring and Using Swagger UI in ASP.NET Core Web API - Code Maze](https://code-maze.com/swagger-ui-asp-net-core-web-api/ \u0022Configuring and Using Swagger UI in ASP.NET Core Web API - Code Maze\u0022)\n[Paths and Operations\n](https://swagger.io/docs/specification/paths-and-operations/ \u0022Paths and Operations\u0022)\n\nLots of interesting pieces here : [Configuring and Using Swagger UI in ASP.NET Core Web API - Code Maze](https://code-maze.com/swagger-ui-asp-net-core-web-api/ \u0022Configuring and Using Swagger UI in ASP.NET Core Web API - Code Maze\u0022)\n\n\n// https://learn.microsoft.com/en-us/aspnet/core/tutorials/web-api-help-pages-using-swagger?view=aspnetcore-8.0#securing-swagger-ui-endpoints\n// https://www.daveabrock.com/2020/11/16/httprepl-openapi-swagger-netcoreapis/\n// customizing UI : https://halldorstefans.com/how-i-customized-the-swagger-ui-in-asp-net-core/\n\n\n// https://dejanstojanovic.net/aspnet/2020/april/combining-multiple-swagger-api-endpoints-in-a-single-ui/\n\n// https://stackoverflow.com/questions/54460863/c-sharp-swagger-documentation-for-individual-members-of-the-request-body-object\n// https://stackoverflow.com/questions/54460863/c-sharp-swagger-documentation-for-individual-members-of-the-request-body-object\n\n\n\n### HTTP-Repl\n[https://github.com/dotnet/AspNetCore.Docs/blob/main/aspnetcore/web-api/http-repl/index.md](https://github.com/dotnet/AspNetCore.Docs/blob/main/aspnetcore/web-api/http-repl/index.md \u0022https://github.com/dotnet/AspNetCore.Docs/blob/main/aspnetcore/web-api/http-repl/index.md\u0022)\n[Test web APIs with the HttpRepl | Microsoft Learn](https://learn.microsoft.com/en-us/aspnet/core/web-api/http-repl/?view=aspnetcore-8.0\u0026tabs=linux \u0022Test web APIs with the HttpRepl | Microsoft Learn\u0022)\n[https://github.com/dotnet/HttpRepl](https://github.com/dotnet/HttpRepl \u0022https://github.com/dotnet/HttpRepl\u0022)\n[How to use HttpRepl to navigate API endpoints](https://www.code4it.dev/blog/httprepl/ \u0022How to use HttpRepl to navigate API endpoints \u0026vert; Code4IT\u0022)\n\n## Steps to create\nNew project ASP.NET Core Web API\nName the project SwagBag\nMake sure \u0022Enable OpenAPI support\u0022 is checked\nCompile and execute the project.  You should see the Swagger UI\n![20240417-104607.jpg](\u003C$LOCATION$\u003E20240417-104607.jpg)\nAdd package Microsoft.OpenApi.Readers\n\nModify Program.cs\nReplace\n\u0060\u0060\u0060csharp\napp.UseSwaggerUI();\n\u0060\u0060\u0060\nwith\n\u0060\u0060\u0060csharp\napp.UseSwaggerUI(c =\u003E\n{\n    // this is the original one - might remove it later\n    c.SwaggerEndpoint(\u0022/swagger/v1/swagger.json\u0022, \u0022Swag Bag (local)\u0022);\n\n    var crp = builder.Environment.ContentRootPath;\n\n    c.AddSwaggers(app.Configuration, crp);\n});\n\u0060\u0060\u0060\nBefore \u0060\u0060\u0060app.run();\u0060\u0060\u0060\nAdd\n\u0060\u0060\u0060csharp\napp.MapGet(\u0022/dl/v1/combined.json\u0022, async () =\u003E\n{\n    string fileName = Path.Join(app.Environment.ContentRootPath, \u0022/dl/v1/combined.json\u0022);\n\n    Stream stream = File.OpenRead(fileName);\n\n    if (stream == null)\n    {\n        TypedResults.NotFound();\n    }\n\n    return Results.Stream(stream, \u0022application/json\u0022);\n});\n\u0060\u0060\u0060\nAdd a file to the project, named OpenApiDocumentExtensions.cs\n\u0060\u0060\u0060csharp\nusing Microsoft.OpenApi;\nusing Microsoft.OpenApi.Extensions;\nusing Microsoft.OpenApi.Interfaces;\nusing Microsoft.OpenApi.Models;\nusing Microsoft.OpenApi.Readers;\nusing Swashbuckle.AspNetCore.SwaggerUI;\n\nnamespace OpenApiExtensions\n{\n    public static class OpenApiDocumentExtensions\n    {\n        public static void AddSwaggers(this SwaggerUIOptions c, IConfiguration config, string contentRoot, string folderPath = \u0022/dl/v1/\u0022)\n        {\n            if (config == null)\n            {\n                throw new ArgumentNullException(\u0022config\u0022);\n            }\n\n            IConfiguration config2 = config.GetSection(\u0022Swaggers\u0022);\n            if (config2 == null)\n            {\n                throw new ArgumentNullException(\u0022Swaggers section missing from config (appsettings.json)\u0022);\n            }\n\n            List\u003CSwaggerEntry\u003E? list = config2.Get\u003CList\u003CSwaggerEntry\u003E\u003E();\n\n            OpenApiDocument combinedDoc = new();\n            combinedDoc.Paths = new();\n            combinedDoc.Components = new();\n\n            //SortedDictionary\u003Cstring, OpenApiPathItem\u003E paths = new();\n\n            foreach (SwaggerEntry se in list)\n            {\n                // Get file and store it somewhere\n\n                ;\n\n                // https://visualstudiomagazine.com/blogs/tool-tracker/2019/10/calling-methods-async.aspx\n                //string fileName = BuildFileName(contentRoot, folderPath, se.Name);\n                //Task task = Download(se.Source, fileName);\n                //task.Wait();\n\n                var httpClient = new HttpClient\n                {\n                    //BaseAddress = new Uri(\u0022https://raw.githubusercontent.com/OAI/OpenAPI-Specification/\u0022)\n                };\n\n                Task\u003CStream\u003E task = httpClient.GetStreamAsync(se.Source);\n                var stream = task.Result;\n\n                //var stream = await httpClient.GetStreamAsync(\u0022master/examples/v3.0/petstore.yaml\u0022);\n                // Read V3 as YAML\n                var openApiDocument = new OpenApiStreamReader().Read(stream, out var diagnostic);\n\n                combinedDoc.Merge(openApiDocument);\n            }\n\n            // sort paths\n            var sPaths = combinedDoc.Paths.ToArray().OrderBy(x =\u003E x.Key).ToList();\n            combinedDoc.Paths.Clear();\n            foreach (var sPath in sPaths)\n            {\n                combinedDoc.Paths.Add(sPath.Key, sPath.Value);\n            }\n\n            combinedDoc.Components.Schemas = combinedDoc.Components.Schemas.ToArray().OrderBy(x =\u003E x.Key).ToDictionary\u003Cstring, OpenApiSchema\u003E();\n            combinedDoc.Components.Responses = combinedDoc.Components.Responses.ToArray().OrderBy(x =\u003E x.Key).ToDictionary\u003Cstring, OpenApiResponse\u003E();\n            combinedDoc.Components.Parameters = combinedDoc.Components.Parameters.ToArray().OrderBy(x =\u003E x.Key).ToDictionary\u003Cstring, OpenApiParameter\u003E();\n            combinedDoc.Components.Examples = combinedDoc.Components.Examples.ToArray().OrderBy(x =\u003E x.Key).ToDictionary\u003Cstring, OpenApiExample\u003E();\n            combinedDoc.Components.RequestBodies = combinedDoc.Components.RequestBodies.ToArray().OrderBy(x =\u003E x.Key).ToDictionary\u003Cstring, OpenApiRequestBody\u003E();\n            combinedDoc.Components.Headers = combinedDoc.Components.Headers.ToArray().OrderBy(x =\u003E x.Key).ToDictionary\u003Cstring, OpenApiHeader\u003E();\n            combinedDoc.Components.SecuritySchemes = combinedDoc.Components.SecuritySchemes.ToArray().OrderBy(x =\u003E x.Key).ToDictionary\u003Cstring, OpenApiSecurityScheme\u003E();\n            combinedDoc.Components.Links = combinedDoc.Components.Links.ToArray().OrderBy(x =\u003E x.Key).ToDictionary\u003Cstring, OpenApiLink\u003E();\n            combinedDoc.Components.Callbacks = combinedDoc.Components.Callbacks.ToArray().OrderBy(x =\u003E x.Key).ToDictionary\u003Cstring, OpenApiCallback\u003E();\n            combinedDoc.Components.Extensions = combinedDoc.Components.Extensions.ToArray().OrderBy(x =\u003E x.Key).ToDictionary\u003Cstring, IOpenApiExtension\u003E();\n            combinedDoc.Servers = combinedDoc.Servers.ToArray().OrderBy(x =\u003E x.Description).ToList();\n            //combinedDoc.SecurityRequirements = combinedDoc.SecurityRequirements.ToArray().OrderBy(x =\u003E x.Key).ToDictionary\u003Cstring, IOpenApiExtension\u003E();\n            combinedDoc.Tags = combinedDoc.Tags.ToArray().OrderBy(x =\u003E x.Description).ToList();\n\n            //foreach (var v in mergetarget.ExternalDocs)\n            //{\n            //    target.ExternalDocs.Add(v);\n            //}\n            combinedDoc.Extensions = combinedDoc.Extensions.ToArray().OrderBy(x =\u003E x.Key).ToDictionary();\n\n            var outputString = combinedDoc.Serialize(OpenApiSpecVersion.OpenApi3_0, OpenApiFormat.Json);\n\n            string fileName = BuildFileName(contentRoot, folderPath, \u0022combined\u0022);\n            File.WriteAllText(fileName, outputString);\n\n            string rel = Path.GetRelativePath(contentRoot, fileName);\n            rel = rel.TrimStart(\u0027.\u0027);\n            rel = rel.Replace(\u0027\\\\\u0027, \u0027/\u0027);\n            ////rel = \u0022https://localhost:7233/\u0022 \u002B rel;\n            rel = \u0022https://localhost:7253/apidoc/\u0022 \u002B rel;\n\n            //c.SwaggerEndpoint(rel, se.DisplayName);\n            //c.SwaggerEndpoint($@\u0022file:///{fileName}\u0022, se.DisplayName);\n        }\n\n\n        public static void SafeAdd\u003CT, T2\u003E(this IDictionary\u003CT, T2\u003E storage, KeyValuePair\u003CT, T2\u003E item)\n        {\n            if (storage.ContainsKey(item.Key))\n            {\n                return;\n            }\n            storage.Add(item);\n        }\n        public static void SafeAdd\u003CT\u003E(this IList\u003CT\u003E storage, T item)\n        {\n            if (storage.Contains(item))\n            {\n                return;\n            }\n            storage.Add(item);\n        }\n\n        public static void Merge(this OpenApiDocument target, OpenApiDocument mergeThis)\n        {\n            //target.ExternalDocs\n            foreach (var v in mergeThis.Components.Callbacks)\n            {\n                target.Components.Callbacks.SafeAdd(v);\n            }\n            foreach (var v in mergeThis.Components.Examples)\n            {\n                target.Components.Examples.SafeAdd(v);\n            }\n            foreach (var v in mergeThis.Components.Extensions)\n            {\n                target.Components.Extensions.SafeAdd(v);\n            }\n            foreach (var v in mergeThis.Components.Headers)\n            {\n                target.Components.Headers.SafeAdd(v);\n            }\n            foreach (var v in mergeThis.Components.Links)\n            {\n                target.Components.Links.SafeAdd(v);\n            }\n\n            foreach (var v in mergeThis.Components.Parameters)\n            {\n                target.Components.Parameters.SafeAdd(v);\n            }\n\n            foreach (var v in mergeThis.Components.RequestBodies)\n            {\n                target.Components.RequestBodies.SafeAdd(v);\n            }\n            foreach (var v in mergeThis.Components.Responses)\n            {\n                target.Components.Responses.SafeAdd(v);\n            }\n            foreach (var v in mergeThis.Components.Schemas)\n            {\n                target.Components.Schemas.SafeAdd\u003Cstring, OpenApiSchema\u003E(v);\n            }\n            foreach (var v in mergeThis.Components.SecuritySchemes)\n            {\n                target.Components.SecuritySchemes.SafeAdd(v);\n            }\n\n            ///// \u003Csummary\u003E\n            ///// REQUIRED. Provides metadata about the API. The metadata MAY be used by tooling as required.\n            ///// \u003C/summary\u003E\n            //public OpenApiInfo Info { get; set; }\n\n            foreach (var v in mergeThis.Servers)\n            {\n                target.Servers.SafeAdd(v);\n            }\n\n            foreach (var v in mergeThis.Paths)\n            {\n                target.Paths.SafeAdd(v);\n            }\n\n            foreach (var v in mergeThis.SecurityRequirements)\n            {\n                target.SecurityRequirements.SafeAdd(v);\n            }\n\n            foreach (var v in mergeThis.Tags)\n            {\n                target.Tags.Add(v);\n            }\n\n            foreach (var v in mergeThis.Extensions)\n            {\n                target.Extensions.SafeAdd(v);\n            }\n        }\n        public static string BuildFileName(string contentRoot, string folderPath, string entryName)\n        {\n            return Path.ChangeExtension(Path.GetFullPath(Path.Join(contentRoot, folderPath, entryName)), \u0022json\u0022);\n        }\n\n        public class SwaggerEntry\n        {\n            public string Name { get; set; } = string.Empty;\n            public string Source { get; set; } = string.Empty;\n            public string DisplayName { get; set; } = string.Empty;\n        }\n    }\n}\n\u0060\u0060\u0060\nEdit appsettings.json\nBefore:\n\u0060\u0060\u0060json\n{\n  \u0022Logging\u0022: {\n    \u0022LogLevel\u0022: {\n      \u0022Default\u0022: \u0022Information\u0022,\n      \u0022Microsoft.AspNetCore\u0022: \u0022Warning\u0022\n    }\n  },\n  \u0022AllowedHosts\u0022: \u0022*\u0022\n}\n\u0060\u0060\u0060\nAfter:\n\u0060\u0060\u0060json\n{\n  \u0022Logging\u0022: {\n    \u0022LogLevel\u0022: {\n      \u0022Default\u0022: \u0022Information\u0022,\n      \u0022Microsoft.AspNetCore\u0022: \u0022Warning\u0022\n    }\n  },\n  \u0022Swaggers\u0022: [\n    {\n      \u0022Name\u0022: \u0022Organizer\u0022,\n      \u0022Source\u0022: \u0022https://localhost:7256/swagger/v1/swagger.json\u0022,\n      \u0022DisplayName\u0022: \u0022Organizer\u0022\n    },\n    {\n      \u0022Name\u0022: \u0022CentralConfig\u0022,\n      \u0022Source\u0022: \u0022https://localhost:7035/swagger/v1/swagger.json\u0022,\n      \u0022DisplayName\u0022: \u0022Central Configuration\u0022\n    }\n  ],\n  \u0022AllowedHosts\u0022: \u0022*\u0022\n}\n\u0060\u0060\u0060\n",
    "Author": "Bradford Bruce",
    "Created": "2024-04-17T09:40:38.8744653",
    "ModifiedBy": "Brad",
    "Modified": "2024-04-18T10:40:54.0821674",
    "LowerName": "local cloud (fog)"
  },
  {
    "Id": "50FF0B41-1EA2-4686-946F-CAE2A41833EE",
    "Name": "Commuting",
    "DocumentType": "Page",
    "Pages": [],
    "PageContent": "# Commuting\n[Lenovo Casual B210 Backpack With 15.6 Laptop Pocket Black - Office Depot](https://www.officedepot.com/a/products/6200565/Lenovo-Casual-B210-Backpack-With-156/ \u0022Lenovo Casual B210 Backpack With 15.6 Laptop Pocket Black - Office Depot\u0022)\n\nOther models are available.  Quality at a low price\n\n[Train Commuter Essentials Every Commuter Needs [2024]](https://mylongcommutesucks.com/train-commuting-essentials/ \u0022Train Commuter Essentials Every Commuter Needs [2024]\u0022)\n\n[10 Best Pocket Radio Devices To Take With You Anywhere](https://radiofidelity.com/best-pocket-radio-usa/ \u002210 Best Pocket Radio Devices To Take With You Anywhere\u0022)\n\n[https://www.amazon.com/pocket-am-fm-radio/s?k=pocket\u002Bam\u002Bfm\u002Bradio](https://www.amazon.com/pocket-am-fm-radio/s?k=pocket\u002Bam\u002Bfm\u002Bradio \u0022https://www.amazon.com/pocket-am-fm-radio/s?k=pocket\u002Bam\u002Bfm\u002Bradio\u0022)\n\n[https://www.reddit.com/r/preppers/comments/16o3moh/whats_in_your_pack_when_commuting_to_the_city/](https://www.reddit.com/r/preppers/comments/16o3moh/whats_in_your_pack_when_commuting_to_the_city/ \u0022https://www.reddit.com/r/preppers/comments/16o3moh/whats_in_your_pack_when_commuting_to_the_city/\u0022)\n\n[My Office Job Backpack Setup | Every Day Carry - YouTube](https://www.youtube.com/watch?v=1Qh_daBLgqE \u0022My Office Job Backpack Setup | Every Day Carry - YouTube\u0022)\n\n## Backpack\n[BANGE Business Smart Backpack](https://www.amazon.com/Business-Backpack-Waterproof-Charging-Durable/dp/B09Z68F3HP/ref=sr_1_3?crid=3UZ8NQA5X1E5F\u0026dib=eyJ2IjoiMSJ9.367dnbY41Nvkrlo_2NFfrrLAggLWs8L3lKu36U0RxCDCJb5RSG5_CaLojx7y_i4OIh1ugWJMhR7SeTF_cYi_sPsFqkH9BJopxflm1IRQVEeBnxpnen1IXeu-HtwaVJm2B0NWaIpX6fR65DLmYmmUQTVV0iQbjCH9EiW7qZZP1CWuYRVBulzuvZBco9WWZiRZlkjZTL19QX4ZWxHGEFzDTOuHVxcmVtc52giVWOh21tg.vREpgSepcb4mr-USpysXRekbUtUckl-976YU2QMUxZM\u0026dib_tag=se\u0026keywords=bange%2Bbusiness%2Bsmart%2Bbackpack\u0026qid=1719517510\u0026sprefix=bange%2Bbusi%2Caps%2C82\u0026sr=8-3\u0026th=1 \u0022https://www.amazon.com/Business-Backpack-Waterproof-Charging-Durable/dp/B09Z68F3HP/ref=sr_1_3?crid=3UZ8NQA5X1E5F\u0026dib=eyJ2IjoiMSJ9.367dnbY41Nvkrlo_2NFfrrLAggLWs8L3lKu36U0RxCDCJb5RSG5_CaLojx7y_i4OIh1ugWJMhR7SeTF_cYi_sPsFqkH9BJopxflm1IRQVEeBnxpnen1IXeu-HtwaVJm2B0NWaIpX6fR65DLmYmmUQTVV0iQbjCH9EiW7qZZP1CWuYRVBulzuvZBco9WWZiRZlkjZTL19QX4ZWxHGEFzDTOuHVxcmVtc52giVWOh21tg.vREpgSepcb4mr-USpysXRekbUtUckl-976YU2QMUxZM\u0026dib_tag=se\u0026keywords=bange%2Bbusiness%2Bsmart%2Bbackpack\u0026qid=1719517510\u0026sprefix=bange%2Bbusi%2Caps%2C82\u0026sr=8-3\u0026th=1\u0022)\n\n[SHRRADOO Travel Laptop Backpack](https://www.amazon.com/SHRRADOO-Mens-Kids-Rucksack-Gray/dp/B07SDNTVFD/ref=sr_1_4?crid=1C73CAZF6CLX0\u0026dib=eyJ2IjoiMSJ9.Ua6rq7QdDJ9BZbHp-GrurfJyizY0YoT90VNBamphAuT9XUgP3tlAYKAmdmT8qvPdxz26IreTjolOkUIhgTq4c746ePZXGJUmc8nwPUpfVVUVh2ww0iBsaeXDeH9KJftwtCN91JaEcxOVzzD489Dz1fTHg-_2LvjIGygL94BqrZehX-6M1aNoybI0QPryOohZ0TO7LzwQVFlrTkbsPcTOo3UBEJg4IXORDatf-iycLrc.5AgH9Glb0QZ4V2iMi5T1n6J1NsWluAYriDRztERfNQQ\u0026dib_tag=se\u0026keywords=shrradoo%2Bbackpack\u0026qid=1719517760\u0026sprefix=shrr%2Caps%2C85\u0026sr=8-4\u0026th=1 \u0022https://www.amazon.com/SHRRADOO-Mens-Kids-Rucksack-Gray/dp/B07SDNTVFD/ref=sr_1_4?crid=1C73CAZF6CLX0\u0026dib=eyJ2IjoiMSJ9.Ua6rq7QdDJ9BZbHp-GrurfJyizY0YoT90VNBamphAuT9XUgP3tlAYKAmdmT8qvPdxz26IreTjolOkUIhgTq4c746ePZXGJUmc8nwPUpfVVUVh2ww0iBsaeXDeH9KJftwtCN91JaEcxOVzzD489Dz1fTHg-_2LvjIGygL94BqrZehX-6M1aNoybI0QPryOohZ0TO7LzwQVFlrTkbsPcTOo3UBEJg4IXORDatf-iycLrc.5AgH9Glb0QZ4V2iMi5T1n6J1NsWluAYriDRztERfNQQ\u0026dib_tag=se\u0026keywords=shrradoo%2Bbackpack\u0026qid=1719517760\u0026sprefix=shrr%2Caps%2C85\u0026sr=8-4\u0026th=1\u0022)\n\n## Battery Bank\n[Anker-Portable-10000mAh-Delivery-PowerCore](https://www.amazon.com/Anker-Portable-10000mAh-Delivery-PowerCore/dp/B08LH26PFT/ref=sr_1_5?crid=17B9JRBKML6ZH\u0026dib=eyJ2IjoiMSJ9.BZcj7dW6J19b7iu01QDcoWncqNnoT05fwQsYRcZ-7YK07wHo520o73WBAkZna4ChxpmFdziLGZUB_K8ihXTdjbhBeUfLu5nIjCl5oSTTuaRhTGJOeiQSIzJI_GRi9ybm_VudzKz5II-GGZKcCZpCfVJB0CsF8SUracSeKJIHXyYaT89BidkB3taHoodBuRmquE6K3mgMf-mBpKQeVIgeFD2oLIiGuHf6YA0Oh90uctc.sqg_cEZKUI8X3C9cVo7H2kUmCQg42Fxe1sMC7prJ4SA\u0026dib_tag=se\u0026keywords=anker%2Bpowercore%2B10000\u0026qid=1719517861\u0026sprefix=anker%2Bpowercore%2Caps%2C84\u0026sr=8-5\u0026th=1 \u0022https://www.amazon.com/Anker-Portable-10000mAh-Delivery-PowerCore/dp/B08LH26PFT/ref=sr_1_5?crid=17B9JRBKML6ZH\u0026dib=eyJ2IjoiMSJ9.BZcj7dW6J19b7iu01QDcoWncqNnoT05fwQsYRcZ-7YK07wHo520o73WBAkZna4ChxpmFdziLGZUB_K8ihXTdjbhBeUfLu5nIjCl5oSTTuaRhTGJOeiQSIzJI_GRi9ybm_VudzKz5II-GGZKcCZpCfVJB0CsF8SUracSeKJIHXyYaT89BidkB3taHoodBuRmquE6K3mgMf-mBpKQeVIgeFD2oLIiGuHf6YA0Oh90uctc.sqg_cEZKUI8X3C9cVo7H2kUmCQg42Fxe1sMC7prJ4SA\u0026dib_tag=se\u0026keywords=anker%2Bpowercore%2B10000\u0026qid=1719517861\u0026sprefix=anker%2Bpowercore%2Caps%2C84\u0026sr=8-5\u0026th=1\u0022)\n\n## Portable Webcam\n[ankerwork-c310-webcam](https://us.ankerwork.com/collections/all/products/ankerwork-c310-webcam \u0022https://us.ankerwork.com/collections/all/products/ankerwork-c310-webcam\u0022)\n\n## Notebook\nRocketbook\n\n## Inexpensive Headphones\n[JVC Flats](https://www.bestbuy.com/site/jvc-flats-wired-on-ear-headphones-black/9182779.p?skuId=9182779)\n\n\n",
    "Author": "Brad",
    "Created": "2024-04-20T09:05:25.8647231",
    "ModifiedBy": "Bradford Bruce",
    "Modified": "2024-07-15T17:38:50.6570015",
    "LowerName": "commuting"
  },
  {
    "Id": "13A81DF8-4019-4408-A309-E465FBF9BD8C",
    "Name": "Fog",
    "DocumentType": "Page",
    "Pages": [],
    "PageContent": "",
    "Author": "Brad",
    "Created": "2024-05-07T09:18:56.4448143",
    "ModifiedBy": "Brad",
    "Modified": "2024-05-16T13:40:34.9401588",
    "LowerName": "fog"
  },
  {
    "Id": "526E0C64-4403-49CF-977C-BDBBEC493F59",
    "Name": "Swagger Replacement",
    "DocumentType": "Page",
    "Pages": [],
    "PageContent": "# Swagger Replacement\nGoing away in .Net 9.  Might as well start now.\n\nMicrosoft.AspNetCore.OpenApi\nMUST be 9.0.0-preview.4.... or later\n\nAdd nuGet package Microsoft.AspNetCore.OpenApi\n\n// Nick Chapsas was the original author of this code : https://www.youtube.com/watch?v=8xEkVmqlr4I\n// raw OpenAPI json is at /openapi/v1.json\n// the Scalar UI is found at /scalar/vi\n// https://media.licdn.com/dms/image/D4D22AQEpJU6Ajerbyg/feedshare-shrink_1280/0/1715268549829?e=1719446400\u0026v=beta\u0026t=3yzk2eTydcrVovkxsXW38XnH_rIVuMMCA7aCq2MJN9s\n\n// generate your http file from this article : https://steven-giesel.com/blogPost/9fa236ef-67da-4113-95e7-99770dc70444\n// https://github.com/christianhelle/httpgenerator?tab=readme-ov-file\n// install the extension\n// start the application\n// switch back to VS\n// Tools =\u003E Generate .http files\n// Enter the address of the OpenAPI file = https://localhost:[port]/openapi/v1.json\n// Enter the base url for the project - https://localhost:[port]/\n// Add HttpFiles to the end of the output folder\n// Uncheck the \u0022Generate .http file per request\u0022 checkbox, at the bottom\n// Click the OK button\n// The new file will be under the project folder HttpFiles\n\n// in launchSettings.json, change all launchUrl entries from \u0022swagger\u0022 to \u0022openapi/v1.json\u0022\n\n// How to use .http files\n// https://dev.to/this-is-learning/visual-studio-2022-a-new-way-to-work-with-http-requests-and-responses-41hp\n\n// Bonus: Presentation Mode\n// https://dev.to/this-is-learning/how-to-use-visual-studio-like-a-pro-when-presenting-your-code-5955\n\n// Autorest\n// https://azure.github.io/autorest/generate/\n\n// Interesting Minimal API stuff\n// https://khalidabuhakmeh.com/fix-missing-openapi-elements-from-aspnet-core-minimal-api-apps\n\n[How to use OpenAPI in Minimal API apps | Microsoft Learn](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/minimal-apis/openapi?view=aspnetcore-8.0 \u0022How to use OpenAPI in Minimal API apps | Microsoft Learn\u0022)\n\n[Get started with NSwag and ASP.NET Core | Microsoft Learn](https://learn.microsoft.com/en-us/aspnet/core/tutorials/getting-started-with-nswag?view=aspnetcore-8.0\u0026tabs=visual-studio \u0022Get started with NSwag and ASP.NET Core | Microsoft Learn\u0022)\n\n[Swagger Removal](https://github.com/dotnet/aspnetcore/issues/54599)\n",
    "Author": "Brad",
    "Created": "2024-05-18T19:32:39.8834535",
    "ModifiedBy": "Brad",
    "Modified": "2024-05-30T10:59:55.8249656",
    "LowerName": "swagger replacement"
  },
  {
    "Id": "A88FC6C2-FD08-4D41-836A-39ADB7A562B3",
    "Name": "Unified WebForms / Blaor app",
    "DocumentType": "Page",
    "Pages": [],
    "PageContent": "",
    "Author": "Brad",
    "Created": "2024-05-31T08:28:13.3758931",
    "ModifiedBy": "Bradford Bruce",
    "Modified": "2024-07-20T11:27:40.4527306-04:00",
    "LowerName": "unified webforms / blaor app"
  },
  {
    "Id": "542B92AA-618F-44A5-A2E9-FFD1E597E208",
    "Name": "SEBPO",
    "DocumentType": "Page",
    "Pages": [],
    "PageContent": "",
    "Author": "Bradford Bruce",
    "Created": "2024-07-19T11:32:08.5190796-04:00",
    "ModifiedBy": "Bradford Bruce",
    "Modified": "2024-07-21T10:48:58.9857334-04:00",
    "LowerName": "sebpo"
  }
]